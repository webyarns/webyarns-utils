// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var audioController, audioHandler, fadeIn, fadeOut, root;
    audioController = {
      context: new (window.AudioContext || window.webkitAudioContext)(),
      bufferMap: {},
      add: function(name, soundUrl) {
        var req;
        req = new XMLHttpRequest();
        req.open("GET", soundUrl, true);
        req.responseType = "arraybuffer";
        req.onload = (function(_this) {
          return function() {
            return _this.context.decodeAudioData(req.response, function(buffer) {
              if (buffer != null) {
                return _this.bufferMap[name] = buffer;
              } else {
                return console.error("cannot decode " + soundUrl);
              }
            });
          };
        })(this);
        return req.send();
      },
      play: function(name) {
        var src;
        src = this.context.createBufferSource();
        console.log(this.bufferMap);
        src.buffer = this.bufferMap[name];
        src.connect(this.context.destination);
        if (src.start) {
          return src.start(0);
        } else {
          return src.noteOn(0);
        }
      }
    };
    audioController.add("nakedcall", "sounds/nakedcall.mp3");
    audioController.add("nakedcall", "sounds/nakedcall.mp3");
    fadeIn = function(audioId) {
      return audioController.play(audioId);
    };
    fadeOut = function(audioId) {
      var audioElement;
      audioElement = document.getElementById(audioId);
      $(audioElement).stop(false);
      return $(audioElement).animate({
        volume: 0
      }, 1500, function() {
        return this.pause;
      });
    };
    audioHandler = function(e) {
      var currentSounds, nextSounds, prevSoundData, soundData;
      soundData = $(e.currentSlide).data('sounds');
      nextSounds = (soundData != null ? soundData.split(",").map(function(e) {
        return e.trim();
      }) : void 0) || [];
      prevSoundData = $(e.previousSlide).data('sounds');
      currentSounds = (prevSoundData != null ? prevSoundData.split(",").map(function(e) {
        return e.trim();
      }) : void 0) || [];
      nextSounds.forEach(function(soundId) {
        if (!(indexOf.call(currentSounds, soundId) >= 0)) {
          fadeIn(soundId);
        }
        return currentSounds = currentSounds.filter(function(id) {
          return id !== soundId;
        });
      });
      return currentSounds.forEach(function(soundId) {
        return fadeOut(soundId);
      });
    };
    Reveal.addEventListener('ready', audioHandler);
    Reveal.addEventListener('slidechanged', audioHandler);
    $("#test").bind('touchend click', function() {
      return audioController.play('nakedcall');
    });
    root = typeof exports !== "undefined" && exports !== null ? exports : this;
    return root.audioHandler = audioHandler;
  })(jQuery);

}).call(this);

//# sourceMappingURL=audio-handlers.js.map
